import socket
import struct
import telnetlib

# Local
target_host = "localhost"
target_port = 1337

# Remote
#target_host = ""
#target_port = 1337

def p64(data):
	return struct.pack('<Q',data)

def p32(data):
	return struct.pack('<I',data)

def u64(data):
	return struct.unpack('<Q',data)[0]

def u32(data):
	return struct.unpack('<I',data)[0]

def sock():
	s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
	s.connect((target_host,target_port))
	return s

def intaractive(s):
	t = telnetlib.Telnet()
	t.sock = s
	t.interact()

def debug_print(prompt,value,formatting = 16):
	if formatting == 16:
		print("[+] " + prompt + "= {0:x}".format(value))
	else:
		print("[+] " + prompt + "= {0:d}".format(value))

def write_buf(data):
	fd = open('buf','wb')
	fd.write(buf)
	fd.close()


def main():
	# main exploit here

	s = sock()

	# important value define
	
	target_base_addr = 0xffffffff
	libc_base_addr   = 0xffffffff
	system_addr      = 0xffffffff

	# payload create

	buf = "A" * 0x100
	buf += p64(system_addr)
	buf += "\n"

	# send and recv

	s.send(buf)
	s.recv(1024)

	# interactive

	t.interactive(s)


if __name__ == '__main__':
	main()





