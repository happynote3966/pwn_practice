
exploit2:     file format elf32-i386


Disassembly of section .init:

0804856c <_init>:
 804856c:	push   ebx
 804856d:	sub    esp,0x8
 8048570:	call   8048575 <_init+0x9>
 8048575:	pop    ebx
 8048576:	add    ebx,0x1a7f
 804857c:	mov    eax,DWORD PTR [ebx-0x4]
 8048582:	test   eax,eax
 8048584:	je     804858b <_init+0x1f>
 8048586:	call   8048630 <__gmon_start__@plt>
 804858b:	call   80487c0 <frame_dummy>
 8048590:	call   8048ca0 <__do_global_ctors_aux>
 8048595:	add    esp,0x8
 8048598:	pop    ebx
 8048599:	ret    

Disassembly of section .plt:

080485a0 <setsockopt@plt-0x10>:
 80485a0:	push   DWORD PTR ds:0x8049ff8
 80485a6:	jmp    DWORD PTR ds:0x8049ffc
 80485ac:	add    BYTE PTR [eax],al
	...

080485b0 <setsockopt@plt>:
 80485b0:	jmp    DWORD PTR ds:0x804a000
 80485b6:	push   0x0
 80485bb:	jmp    80485a0 <_init+0x34>

080485c0 <printf@plt>:
 80485c0:	jmp    DWORD PTR ds:0x804a004
 80485c6:	push   0x8
 80485cb:	jmp    80485a0 <_init+0x34>

080485d0 <time@plt>:
 80485d0:	jmp    DWORD PTR ds:0x804a008
 80485d6:	push   0x10
 80485db:	jmp    80485a0 <_init+0x34>

080485e0 <inet_ntoa@plt>:
 80485e0:	jmp    DWORD PTR ds:0x804a00c
 80485e6:	push   0x18
 80485eb:	jmp    80485a0 <_init+0x34>

080485f0 <htons@plt>:
 80485f0:	jmp    DWORD PTR ds:0x804a010
 80485f6:	push   0x20
 80485fb:	jmp    80485a0 <_init+0x34>

08048600 <perror@plt>:
 8048600:	jmp    DWORD PTR ds:0x804a014
 8048606:	push   0x28
 804860b:	jmp    80485a0 <_init+0x34>

08048610 <accept@plt>:
 8048610:	jmp    DWORD PTR ds:0x804a018
 8048616:	push   0x30
 804861b:	jmp    80485a0 <_init+0x34>

08048620 <waitpid@plt>:
 8048620:	jmp    DWORD PTR ds:0x804a01c
 8048626:	push   0x38
 804862b:	jmp    80485a0 <_init+0x34>

08048630 <__gmon_start__@plt>:
 8048630:	jmp    DWORD PTR ds:0x804a020
 8048636:	push   0x40
 804863b:	jmp    80485a0 <_init+0x34>

08048640 <exit@plt>:
 8048640:	jmp    DWORD PTR ds:0x804a024
 8048646:	push   0x48
 804864b:	jmp    80485a0 <_init+0x34>

08048650 <srand@plt>:
 8048650:	jmp    DWORD PTR ds:0x804a028
 8048656:	push   0x50
 804865b:	jmp    80485a0 <_init+0x34>

08048660 <__libc_start_main@plt>:
 8048660:	jmp    DWORD PTR ds:0x804a02c
 8048666:	push   0x58
 804866b:	jmp    80485a0 <_init+0x34>

08048670 <bind@plt>:
 8048670:	jmp    DWORD PTR ds:0x804a030
 8048676:	push   0x60
 804867b:	jmp    80485a0 <_init+0x34>

08048680 <rand@plt>:
 8048680:	jmp    DWORD PTR ds:0x804a034
 8048686:	push   0x68
 804868b:	jmp    80485a0 <_init+0x34>

08048690 <fork@plt>:
 8048690:	jmp    DWORD PTR ds:0x804a038
 8048696:	push   0x70
 804869b:	jmp    80485a0 <_init+0x34>

080486a0 <sigemptyset@plt>:
 80486a0:	jmp    DWORD PTR ds:0x804a03c
 80486a6:	push   0x78
 80486ab:	jmp    80485a0 <_init+0x34>

080486b0 <freeaddrinfo@plt>:
 80486b0:	jmp    DWORD PTR ds:0x804a040
 80486b6:	push   0x80
 80486bb:	jmp    80485a0 <_init+0x34>

080486c0 <listen@plt>:
 80486c0:	jmp    DWORD PTR ds:0x804a044
 80486c6:	push   0x88
 80486cb:	jmp    80485a0 <_init+0x34>

080486d0 <socket@plt>:
 80486d0:	jmp    DWORD PTR ds:0x804a048
 80486d6:	push   0x90
 80486db:	jmp    80485a0 <_init+0x34>

080486e0 <getaddrinfo@plt>:
 80486e0:	jmp    DWORD PTR ds:0x804a04c
 80486e6:	push   0x98
 80486eb:	jmp    80485a0 <_init+0x34>

080486f0 <sigaction@plt>:
 80486f0:	jmp    DWORD PTR ds:0x804a050
 80486f6:	push   0xa0
 80486fb:	jmp    80485a0 <_init+0x34>

08048700 <recv@plt>:
 8048700:	jmp    DWORD PTR ds:0x804a054
 8048706:	push   0xa8
 804870b:	jmp    80485a0 <_init+0x34>

08048710 <close@plt>:
 8048710:	jmp    DWORD PTR ds:0x804a058
 8048716:	push   0xb0
 804871b:	jmp    80485a0 <_init+0x34>

08048720 <send@plt>:
 8048720:	jmp    DWORD PTR ds:0x804a05c
 8048726:	push   0xb8
 804872b:	jmp    80485a0 <_init+0x34>

Disassembly of section .text:

08048730 <_start>:
 8048730:	xor    ebp,ebp
 8048732:	pop    esi
 8048733:	mov    ecx,esp
 8048735:	and    esp,0xfffffff0
 8048738:	push   eax
 8048739:	push   esp
 804873a:	push   edx
 804873b:	push   0x8048c90
 8048740:	push   0x8048c20
 8048745:	push   ecx
 8048746:	push   esi
 8048747:	push   0x804892b
 804874c:	call   8048660 <__libc_start_main@plt>
 8048751:	hlt    
 8048752:	nop
 8048753:	nop
 8048754:	nop
 8048755:	nop
 8048756:	nop
 8048757:	nop
 8048758:	nop
 8048759:	nop
 804875a:	nop
 804875b:	nop
 804875c:	nop
 804875d:	nop
 804875e:	nop
 804875f:	nop

08048760 <__do_global_dtors_aux>:
 8048760:	push   ebp
 8048761:	mov    ebp,esp
 8048763:	push   ebx
 8048764:	sub    esp,0x4
 8048767:	cmp    BYTE PTR ds:0x804a068,0x0
 804876e:	jne    80487af <__do_global_dtors_aux+0x4f>
 8048770:	mov    eax,ds:0x804a06c
 8048775:	mov    ebx,0x8049f20
 804877a:	sub    ebx,0x8049f1c
 8048780:	sar    ebx,0x2
 8048783:	sub    ebx,0x1
 8048786:	cmp    eax,ebx
 8048788:	jae    80487a8 <__do_global_dtors_aux+0x48>
 804878a:	lea    esi,[esi+0x0]
 8048790:	add    eax,0x1
 8048793:	mov    ds:0x804a06c,eax
 8048798:	call   DWORD PTR [eax*4+0x8049f1c]
 804879f:	mov    eax,ds:0x804a06c
 80487a4:	cmp    eax,ebx
 80487a6:	jb     8048790 <__do_global_dtors_aux+0x30>
 80487a8:	mov    BYTE PTR ds:0x804a068,0x1
 80487af:	add    esp,0x4
 80487b2:	pop    ebx
 80487b3:	pop    ebp
 80487b4:	ret    
 80487b5:	lea    esi,[esi+eiz*1+0x0]
 80487b9:	lea    edi,[edi+eiz*1+0x0]

080487c0 <frame_dummy>:
 80487c0:	push   ebp
 80487c1:	mov    ebp,esp
 80487c3:	sub    esp,0x18
 80487c6:	mov    eax,ds:0x8049f24
 80487cb:	test   eax,eax
 80487cd:	je     80487e1 <frame_dummy+0x21>
 80487cf:	mov    eax,0x0
 80487d4:	test   eax,eax
 80487d6:	je     80487e1 <frame_dummy+0x21>
 80487d8:	mov    DWORD PTR [esp],0x8049f24
 80487df:	call   eax
 80487e1:	leave  
 80487e2:	ret    
 80487e3:	nop

080487e4 <wait_for_child>:
 80487e4:	push   ebp
 80487e5:	mov    ebp,esp
 80487e7:	sub    esp,0x18
 80487ea:	nop
 80487eb:	mov    DWORD PTR [esp+0x8],0x1
 80487f3:	mov    DWORD PTR [esp+0x4],0x0
 80487fb:	mov    DWORD PTR [esp],0xffffffff
 8048802:	call   8048620 <waitpid@plt>
 8048807:	test   eax,eax
 8048809:	jg     80487eb <wait_for_child+0x7>
 804880b:	leave  
 804880c:	ret    



|buf |<-ebp-0x80c
|    |
|    |
|0x0 |
|ebx |
|edi |
|ebp |<-ebp
|ret |
|arg1|
|arg2|

0x80c

0804880d <handle>:
 804880d:	push   ebp
 804880e:	mov    ebp,esp
 8048810:	push   edi
 8048811:	push   ebx
 8048812:	sub    esp,0x820
 8048818:	mov    DWORD PTR [ebp-0xc],0x0
 804881f:	lea    eax,[ebp-0x80c]
 8048825:	mov    ebx,eax
 8048827:	mov    eax,0x0
 804882c:	mov    edx,0x200
 8048831:	mov    edi,ebx
 8048833:	mov    ecx,edx
 8048835:	rep stos DWORD PTR es:[edi],eax
 8048837:	mov    DWORD PTR [esp],0x0
 804883e:	call   80485d0 <time@plt>
 8048843:	mov    DWORD PTR [esp],eax
 8048846:	call   8048650 <srand@plt>
 804884b:	call   8048680 <rand@plt>
 8048850:	mov    ds:0x804a074,eax
 8048855:	mov    eax,ds:0x804a074
 804885a:	mov    DWORD PTR [ebp-0xc],eax
 804885d:	lea    eax,[ebp-0x80c]
 8048863:	lea    edx,[ebp-0x80c]
 8048869:	mov    DWORD PTR [eax],edx
 804886b:	mov    DWORD PTR [esp+0xc],0x0
 8048873:	mov    DWORD PTR [esp+0x8],0x4
 804887b:	lea    eax,[ebp-0x80c]
 8048881:	mov    DWORD PTR [esp+0x4],eax
 8048885:	mov    eax,DWORD PTR [ebp+0x8]
 8048888:	mov    DWORD PTR [esp],eax
 804888b:	call   8048720 <send@plt>
 8048890:	mov    DWORD PTR [esp+0xc],0x0
 8048898:	mov    DWORD PTR [esp+0x8],0x4
 80488a0:	lea    eax,[ebp-0xc]
 80488a3:	mov    DWORD PTR [esp+0x4],eax
 80488a7:	mov    eax,DWORD PTR [ebp+0x8]
 80488aa:	mov    DWORD PTR [esp],eax
 80488ad:	call   8048720 <send@plt>
 80488b2:	mov    DWORD PTR [esp+0xc],0x0
 80488ba:	mov    DWORD PTR [esp+0x8],0x63
 80488c2:	mov    DWORD PTR [esp+0x4],0x8048cf0
 80488ca:	mov    eax,DWORD PTR [ebp+0x8]
 80488cd:	mov    DWORD PTR [esp],eax
 80488d0:	call   8048720 <send@plt>
 80488d5:	mov    DWORD PTR [esp+0xc],0x0
 80488dd:	mov    DWORD PTR [esp+0x8],0x1000
 80488e5:	lea    eax,[ebp-0x80c]
 80488eb:	mov    DWORD PTR [esp+0x4],eax
 80488ef:	mov    eax,DWORD PTR [ebp+0x8]
 80488f2:	mov    DWORD PTR [esp],eax
 80488f5:	call   8048700 <recv@plt>
 80488fa:	mov    BYTE PTR [ebp-0xd],0x0
 80488fe:	mov    edx,DWORD PTR [ebp-0xc]
 8048901:	mov    eax,ds:0x804a074
 8048906:	cmp    edx,eax
 8048908:	je     8048921 <handle+0x114>
 804890a:	mov    eax,DWORD PTR [ebp+0x8]
 804890d:	mov    DWORD PTR [esp],eax
 8048910:	call   8048710 <close@plt>
 8048915:	mov    DWORD PTR [esp],0x0
 804891c:	call   8048640 <exit@plt>
 8048921:	add    esp,0x820
 8048927:	pop    ebx
 8048928:	pop    edi
 8048929:	pop    ebp
 804892a:	ret    

|    |<-esp
|    |
|    |
|buf |<-ebp-0x80c
|    |
|    |
|cana|<-esp+0x820
|ebx |
|edi |
|ebp |<-ebp
|ret |
|arg1|
|arg2|

0x80c

shellcode+('A' * len(buf) + canary + 'A' * 12

0804892b <main>:
 804892b:	push   ebp
 804892c:	mov    ebp,esp
 804892e:	push   ebx
 804892f:	and    esp,0xfffffff0
 8048932:	sub    esp,0x100
 8048938:	mov    DWORD PTR [esp+0x40],0x1
 8048940:	lea    eax,[esp+0x48]
 8048944:	mov    edx,eax
 8048946:	mov    ecx,0x0
 804894b:	mov    eax,0x20
 8048950:	mov    ebx,eax
 8048952:	and    ebx,0xfffffffc
 8048955:	mov    eax,0x0
 804895a:	mov    DWORD PTR [edx+eax*1],ecx
 804895d:	add    eax,0x4
 8048960:	cmp    eax,ebx
 8048962:	jb     804895a <main+0x2f>
 8048964:	add    edx,eax
 8048966:	mov    DWORD PTR [esp+0x4c],0x2
 804896e:	mov    DWORD PTR [esp+0x50],0x1
 8048976:	lea    ecx,[esp+0x48]
 804897a:	mov    edx,0x8048d53
 804897f:	mov    eax,0x8048d59
 8048984:	lea    ebx,[esp+0x44]
 8048988:	mov    DWORD PTR [esp+0xc],ebx
 804898c:	mov    DWORD PTR [esp+0x8],ecx
 8048990:	mov    DWORD PTR [esp+0x4],edx
 8048994:	mov    DWORD PTR [esp],eax
 8048997:	call   80486e0 <getaddrinfo@plt>
 804899c:	test   eax,eax
 804899e:	je     80489b6 <main+0x8b>
 80489a0:	mov    DWORD PTR [esp],0x8048d61
 80489a7:	call   8048600 <perror@plt>
 80489ac:	mov    eax,0x1
 80489b1:	jmp    8048c11 <main+0x2e6>
 80489b6:	mov    eax,DWORD PTR [esp+0x44]
 80489ba:	mov    ecx,DWORD PTR [eax+0xc]
 80489bd:	mov    eax,DWORD PTR [esp+0x44]
 80489c1:	mov    edx,DWORD PTR [eax+0x8]
 80489c4:	mov    eax,DWORD PTR [esp+0x44]
 80489c8:	mov    eax,DWORD PTR [eax+0x4]
 80489cb:	mov    DWORD PTR [esp+0x8],ecx
 80489cf:	mov    DWORD PTR [esp+0x4],edx
 80489d3:	mov    DWORD PTR [esp],eax
 80489d6:	call   80486d0 <socket@plt>
 80489db:	mov    DWORD PTR [esp+0xfc],eax
 80489e2:	cmp    DWORD PTR [esp+0xfc],0xffffffff
 80489ea:	jne    8048a02 <main+0xd7>
 80489ec:	mov    DWORD PTR [esp],0x8048d6d
 80489f3:	call   8048600 <perror@plt>
 80489f8:	mov    eax,0x1
 80489fd:	jmp    8048c11 <main+0x2e6>
 8048a02:	mov    DWORD PTR [esp+0x10],0x4
 8048a0a:	lea    eax,[esp+0x40]
 8048a0e:	mov    DWORD PTR [esp+0xc],eax
 8048a12:	mov    DWORD PTR [esp+0x8],0x2
 8048a1a:	mov    DWORD PTR [esp+0x4],0x1
 8048a22:	mov    eax,DWORD PTR [esp+0xfc]
 8048a29:	mov    DWORD PTR [esp],eax
 8048a2c:	call   80485b0 <setsockopt@plt>
 8048a31:	cmp    eax,0xffffffff
 8048a34:	jne    8048a4c <main+0x121>
 8048a36:	mov    DWORD PTR [esp],0x8048d74
 8048a3d:	call   8048600 <perror@plt>
 8048a42:	mov    eax,0x1
 8048a47:	jmp    8048c11 <main+0x2e6>
 8048a4c:	mov    eax,DWORD PTR [esp+0x44]
 8048a50:	mov    edx,DWORD PTR [eax+0x10]
 8048a53:	mov    eax,DWORD PTR [esp+0x44]
 8048a57:	mov    eax,DWORD PTR [eax+0x14]
 8048a5a:	mov    DWORD PTR [esp+0x8],edx
 8048a5e:	mov    DWORD PTR [esp+0x4],eax
 8048a62:	mov    eax,DWORD PTR [esp+0xfc]
 8048a69:	mov    DWORD PTR [esp],eax
 8048a6c:	call   8048670 <bind@plt>
 8048a71:	cmp    eax,0xffffffff
 8048a74:	jne    8048a8c <main+0x161>
 8048a76:	mov    DWORD PTR [esp],0x8048d7f
 8048a7d:	call   8048600 <perror@plt>
 8048a82:	mov    eax,0x1
 8048a87:	jmp    8048c11 <main+0x2e6>
 8048a8c:	mov    DWORD PTR [esp+0x4],0x64
 8048a94:	mov    eax,DWORD PTR [esp+0xfc]
 8048a9b:	mov    DWORD PTR [esp],eax
 8048a9e:	call   80486c0 <listen@plt>
 8048aa3:	cmp    eax,0xffffffff
 8048aa6:	jne    8048abe <main+0x193>
 8048aa8:	mov    DWORD PTR [esp],0x8048d84
 8048aaf:	call   8048600 <perror@plt>
 8048ab4:	mov    eax,0x1
 8048ab9:	jmp    8048c11 <main+0x2e6>
 8048abe:	mov    eax,DWORD PTR [esp+0x44]
 8048ac2:	mov    DWORD PTR [esp],eax
 8048ac5:	call   80486b0 <freeaddrinfo@plt>
 8048aca:	mov    DWORD PTR [esp+0x68],0x80487e4
 8048ad2:	lea    eax,[esp+0x68]
 8048ad6:	add    eax,0x4
 8048ad9:	mov    DWORD PTR [esp],eax
 8048adc:	call   80486a0 <sigemptyset@plt>
 8048ae1:	mov    DWORD PTR [esp+0xec],0x10000000
 8048aec:	lea    eax,[esp+0x68]
 8048af0:	mov    DWORD PTR [esp+0x8],0x0
 8048af8:	mov    DWORD PTR [esp+0x4],eax
 8048afc:	mov    DWORD PTR [esp],0x11
 8048b03:	call   80486f0 <sigaction@plt>
 8048b08:	cmp    eax,0xffffffff
 8048b0b:	jne    8048b23 <main+0x1f8>
 8048b0d:	mov    DWORD PTR [esp],0x8048d8b
 8048b14:	call   8048600 <perror@plt>
 8048b19:	mov    eax,0x1
 8048b1e:	jmp    8048c11 <main+0x2e6>
 8048b23:	mov    DWORD PTR [esp+0x2c],0x10
 8048b2b:	lea    eax,[esp+0x2c]
 8048b2f:	mov    DWORD PTR [esp+0x8],eax
 8048b33:	lea    eax,[esp+0x30]
 8048b37:	mov    DWORD PTR [esp+0x4],eax
 8048b3b:	mov    eax,DWORD PTR [esp+0xfc]
 8048b42:	mov    DWORD PTR [esp],eax
 8048b45:	call   8048610 <accept@plt>
 8048b4a:	mov    DWORD PTR [esp+0xf8],eax
 8048b51:	cmp    DWORD PTR [esp+0xf8],0xffffffff
 8048b59:	jne    8048b71 <main+0x246>
 8048b5b:	mov    DWORD PTR [esp],0x8048d95
 8048b62:	call   8048600 <perror@plt>
 8048b67:	mov    eax,0x0
 8048b6c:	jmp    8048c11 <main+0x2e6>
 8048b71:	movzx  eax,WORD PTR [esp+0x32]
 8048b76:	movzx  eax,ax
 8048b79:	mov    DWORD PTR [esp],eax
 8048b7c:	call   80485f0 <htons@plt>
 8048b81:	movzx  ebx,ax
 8048b84:	mov    eax,DWORD PTR [esp+0x34]
 8048b88:	mov    DWORD PTR [esp],eax
 8048b8b:	call   80485e0 <inet_ntoa@plt>
 8048b90:	mov    edx,0x8048d9c
 8048b95:	mov    DWORD PTR [esp+0x8],ebx
 8048b99:	mov    DWORD PTR [esp+0x4],eax
 8048b9d:	mov    DWORD PTR [esp],edx
 8048ba0:	call   80485c0 <printf@plt>
 8048ba5:	call   8048690 <fork@plt>
 8048baa:	mov    DWORD PTR [esp+0xf4],eax
 8048bb1:	cmp    DWORD PTR [esp+0xf4],0x0
 8048bb9:	jne    8048be0 <main+0x2b5>
 8048bbb:	mov    eax,DWORD PTR [esp+0xfc]
 8048bc2:	mov    DWORD PTR [esp],eax
 8048bc5:	call   8048710 <close@plt>
 8048bca:	mov    eax,DWORD PTR [esp+0xf8]
 8048bd1:	mov    DWORD PTR [esp],eax
 8048bd4:	call   804880d <handle>
 8048bd9:	mov    eax,0x0
 8048bde:	jmp    8048c11 <main+0x2e6>
 8048be0:	cmp    DWORD PTR [esp+0xf4],0xffffffff
 8048be8:	jne    8048bfd <main+0x2d2>
 8048bea:	mov    DWORD PTR [esp],0x8048dc1
 8048bf1:	call   8048600 <perror@plt>
 8048bf6:	mov    eax,0x1
 8048bfb:	jmp    8048c11 <main+0x2e6>
 8048bfd:	mov    eax,DWORD PTR [esp+0xf8]
 8048c04:	mov    DWORD PTR [esp],eax
 8048c07:	call   8048710 <close@plt>
 8048c0c:	jmp    8048b23 <main+0x1f8>
 8048c11:	mov    ebx,DWORD PTR [ebp-0x4]
 8048c14:	leave  
 8048c15:	ret    
 8048c16:	nop
 8048c17:	nop
 8048c18:	nop
 8048c19:	nop
 8048c1a:	nop
 8048c1b:	nop
 8048c1c:	nop
 8048c1d:	nop
 8048c1e:	nop
 8048c1f:	nop

08048c20 <__libc_csu_init>:
 8048c20:	push   ebp
 8048c21:	push   edi
 8048c22:	push   esi
 8048c23:	push   ebx
 8048c24:	call   8048c92 <__i686.get_pc_thunk.bx>
 8048c29:	add    ebx,0x13cb
 8048c2f:	sub    esp,0x1c
 8048c32:	mov    ebp,DWORD PTR [esp+0x30]
 8048c36:	lea    edi,[ebx-0xe0]
 8048c3c:	call   804856c <_init>
 8048c41:	lea    eax,[ebx-0xe0]
 8048c47:	sub    edi,eax
 8048c49:	sar    edi,0x2
 8048c4c:	test   edi,edi
 8048c4e:	je     8048c79 <__libc_csu_init+0x59>
 8048c50:	xor    esi,esi
 8048c52:	lea    esi,[esi+0x0]
 8048c58:	mov    eax,DWORD PTR [esp+0x38]
 8048c5c:	mov    DWORD PTR [esp],ebp
 8048c5f:	mov    DWORD PTR [esp+0x8],eax
 8048c63:	mov    eax,DWORD PTR [esp+0x34]
 8048c67:	mov    DWORD PTR [esp+0x4],eax
 8048c6b:	call   DWORD PTR [ebx+esi*4-0xe0]
 8048c72:	add    esi,0x1
 8048c75:	cmp    esi,edi
 8048c77:	jne    8048c58 <__libc_csu_init+0x38>
 8048c79:	add    esp,0x1c
 8048c7c:	pop    ebx
 8048c7d:	pop    esi
 8048c7e:	pop    edi
 8048c7f:	pop    ebp
 8048c80:	ret    
 8048c81:	jmp    8048c90 <__libc_csu_fini>
 8048c83:	nop
 8048c84:	nop
 8048c85:	nop
 8048c86:	nop
 8048c87:	nop
 8048c88:	nop
 8048c89:	nop
 8048c8a:	nop
 8048c8b:	nop
 8048c8c:	nop
 8048c8d:	nop
 8048c8e:	nop
 8048c8f:	nop

08048c90 <__libc_csu_fini>:
 8048c90:	repz ret 

08048c92 <__i686.get_pc_thunk.bx>:
 8048c92:	mov    ebx,DWORD PTR [esp]
 8048c95:	ret    
 8048c96:	nop
 8048c97:	nop
 8048c98:	nop
 8048c99:	nop
 8048c9a:	nop
 8048c9b:	nop
 8048c9c:	nop
 8048c9d:	nop
 8048c9e:	nop
 8048c9f:	nop

08048ca0 <__do_global_ctors_aux>:
 8048ca0:	push   ebp
 8048ca1:	mov    ebp,esp
 8048ca3:	push   ebx
 8048ca4:	sub    esp,0x4
 8048ca7:	mov    eax,ds:0x8049f14
 8048cac:	cmp    eax,0xffffffff
 8048caf:	je     8048cc4 <__do_global_ctors_aux+0x24>
 8048cb1:	mov    ebx,0x8049f14
 8048cb6:	xchg   ax,ax
 8048cb8:	sub    ebx,0x4
 8048cbb:	call   eax
 8048cbd:	mov    eax,DWORD PTR [ebx]
 8048cbf:	cmp    eax,0xffffffff
 8048cc2:	jne    8048cb8 <__do_global_ctors_aux+0x18>
 8048cc4:	add    esp,0x4
 8048cc7:	pop    ebx
 8048cc8:	pop    ebp
 8048cc9:	ret    
 8048cca:	nop
 8048ccb:	nop

Disassembly of section .fini:

08048ccc <_fini>:
 8048ccc:	push   ebx
 8048ccd:	sub    esp,0x8
 8048cd0:	call   8048cd5 <_fini+0x9>
 8048cd5:	pop    ebx
 8048cd6:	add    ebx,0x131f
 8048cdc:	call   8048760 <__do_global_dtors_aux>
 8048ce1:	add    esp,0x8
 8048ce4:	pop    ebx
 8048ce5:	ret    
