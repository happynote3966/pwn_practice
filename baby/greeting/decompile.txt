
greeting:     file format elf32-i386


Disassembly of section .init:

08048404 <_init>:
 8048404:	push   ebx
 8048405:	sub    esp,0x8
 8048408:	call   8048520 <__x86.get_pc_thunk.bx>
 804840d:	add    ebx,0x161b
 8048413:	mov    eax,DWORD PTR [ebx-0x4]
 8048419:	test   eax,eax
 804841b:	je     8048422 <_init+0x1e>
 804841d:	call   80484a0 <__gmon_start__@plt>
 8048422:	add    esp,0x8
 8048425:	pop    ebx
 8048426:	ret    

Disassembly of section .plt:

08048430 <.plt>:
 8048430:	push   DWORD PTR ds:0x8049a2c
 8048436:	jmp    DWORD PTR ds:0x8049a30
 804843c:	add    BYTE PTR [eax],al
	...

08048440 <setbuf@plt>:
 8048440:	jmp    DWORD PTR ds:0x8049a34
 8048446:	push   0x0
 804844b:	jmp    8048430 <.plt>

08048450 <printf@plt>:
 8048450:	jmp    DWORD PTR ds:0x8049a38
 8048456:	push   0x8
 804845b:	jmp    8048430 <.plt>

08048460 <fgets@plt>:
 8048460:	jmp    DWORD PTR ds:0x8049a3c
 8048466:	push   0x10
 804846b:	jmp    8048430 <.plt>

08048470 <__stack_chk_fail@plt>:
 8048470:	jmp    DWORD PTR ds:0x8049a40
 8048476:	push   0x18
 804847b:	jmp    8048430 <.plt>

08048480 <puts@plt>:
 8048480:	jmp    DWORD PTR ds:0x8049a44
 8048486:	push   0x20
 804848b:	jmp    8048430 <.plt>

08048490 <system@plt>:
 8048490:	jmp    DWORD PTR ds:0x8049a48
 8048496:	push   0x28
 804849b:	jmp    8048430 <.plt>

080484a0 <__gmon_start__@plt>:
 80484a0:	jmp    DWORD PTR ds:0x8049a4c
 80484a6:	push   0x30
 80484ab:	jmp    8048430 <.plt>

080484b0 <strchr@plt>:
 80484b0:	jmp    DWORD PTR ds:0x8049a50
 80484b6:	push   0x38
 80484bb:	jmp    8048430 <.plt>

080484c0 <strlen@plt>:
 80484c0:	jmp    DWORD PTR ds:0x8049a54
 80484c6:	push   0x40
 80484cb:	jmp    8048430 <.plt>

080484d0 <__libc_start_main@plt>:
 80484d0:	jmp    DWORD PTR ds:0x8049a58
 80484d6:	push   0x48
 80484db:	jmp    8048430 <.plt>

080484e0 <sprintf@plt>:
 80484e0:	jmp    DWORD PTR ds:0x8049a5c
 80484e6:	push   0x50
 80484eb:	jmp    8048430 <.plt>

Disassembly of section .text:

080484f0 <_start>:
 80484f0:	xor    ebp,ebp
 80484f2:	pop    esi
 80484f3:	mov    ecx,esp
 80484f5:	and    esp,0xfffffff0
 80484f8:	push   eax
 80484f9:	push   esp
 80484fa:	push   edx
 80484fb:	push   0x8048740
 8048500:	push   0x80486d0
 8048505:	push   ecx
 8048506:	push   esi
 8048507:	push   0x80485ed
 804850c:	call   80484d0 <__libc_start_main@plt>
 8048511:	hlt    
 8048512:	xchg   ax,ax
 8048514:	xchg   ax,ax
 8048516:	xchg   ax,ax
 8048518:	xchg   ax,ax
 804851a:	xchg   ax,ax
 804851c:	xchg   ax,ax
 804851e:	xchg   ax,ax

08048520 <__x86.get_pc_thunk.bx>:
 8048520:	mov    ebx,DWORD PTR [esp]
 8048523:	ret    
 8048524:	xchg   ax,ax
 8048526:	xchg   ax,ax
 8048528:	xchg   ax,ax
 804852a:	xchg   ax,ax
 804852c:	xchg   ax,ax
 804852e:	xchg   ax,ax

08048530 <deregister_tm_clones>:
 8048530:	mov    eax,0x8049a6b
 8048535:	sub    eax,0x8049a68
 804853a:	cmp    eax,0x6
 804853d:	ja     8048540 <deregister_tm_clones+0x10>
 804853f:	ret    
 8048540:	mov    eax,0x0
 8048545:	test   eax,eax
 8048547:	je     804853f <deregister_tm_clones+0xf>
 8048549:	push   ebp
 804854a:	mov    ebp,esp
 804854c:	sub    esp,0x18
 804854f:	mov    DWORD PTR [esp],0x8049a68
 8048556:	call   eax
 8048558:	leave  
 8048559:	ret    
 804855a:	lea    esi,[esi+0x0]

08048560 <register_tm_clones>:
 8048560:	mov    eax,0x8049a68
 8048565:	sub    eax,0x8049a68
 804856a:	sar    eax,0x2
 804856d:	mov    edx,eax
 804856f:	shr    edx,0x1f
 8048572:	add    eax,edx
 8048574:	sar    eax,1
 8048576:	jne    8048579 <register_tm_clones+0x19>
 8048578:	ret    
 8048579:	mov    edx,0x0
 804857e:	test   edx,edx
 8048580:	je     8048578 <register_tm_clones+0x18>
 8048582:	push   ebp
 8048583:	mov    ebp,esp
 8048585:	sub    esp,0x18
 8048588:	mov    DWORD PTR [esp+0x4],eax
 804858c:	mov    DWORD PTR [esp],0x8049a68
 8048593:	call   edx
 8048595:	leave  
 8048596:	ret    
 8048597:	mov    esi,esi
 8048599:	lea    edi,[edi+eiz*1+0x0]

080485a0 <__do_global_dtors_aux>:
 80485a0:	cmp    BYTE PTR ds:0x8049aa4,0x0
 80485a7:	jne    80485bc <__do_global_dtors_aux+0x1c>
 80485a9:	push   ebp
 80485aa:	mov    ebp,esp
 80485ac:	sub    esp,0x8
 80485af:	call   8048530 <deregister_tm_clones>
 80485b4:	mov    BYTE PTR ds:0x8049aa4,0x1
 80485bb:	leave  
 80485bc:	repz ret 
 80485be:	xchg   ax,ax

080485c0 <frame_dummy>:
 80485c0:	mov    eax,ds:0x8049938
 80485c5:	test   eax,eax
 80485c7:	je     80485e8 <frame_dummy+0x28>
 80485c9:	mov    eax,0x0
 80485ce:	test   eax,eax
 80485d0:	je     80485e8 <frame_dummy+0x28>
 80485d2:	push   ebp
 80485d3:	mov    ebp,esp
 80485d5:	sub    esp,0x18
 80485d8:	mov    DWORD PTR [esp],0x8049938
 80485df:	call   eax
 80485e1:	leave  
 80485e2:	jmp    8048560 <register_tm_clones>
 80485e7:	nop
 80485e8:	jmp    8048560 <register_tm_clones>

080485ed <main>:
void sub_80485ed_main(void){
	stack := 0xa0
	char buf1;//@[esp+0x5c]
	char buf2;//@[esp+0x1c]
	DWORD canary;//@[esp+0x9c]
	canary = canary();
	printf("Please tell me your name... ");
	var1 = 0x40;
	if(getnline(buf1,0x40) == 0x0){
		puts("Don't ignore me;( ");
	}else{
		sprintf(buf2,"Nice to meet you, %s :)\n",buf1);
		printf(buf1);
	}
	return;
}

08048679 <getnline>:

DWORD sub_8048679_getnline(char *arg1, DWORD arg2){
	stack := 0x28
	DWORD var1;//@[ebp-0xc]
	fgets(arg1,arg2,stdin);
	var1 = strchr(arg1,0xa);
	if(var1 != 0x0){
		var1 = '\0';
	}
	return strlen(arg1);
}
		
	

080486d0 <__libc_csu_init>:
 80486d0:	push   ebp
 80486d1:	push   edi
 80486d2:	xor    edi,edi
 80486d4:	push   esi
 80486d5:	push   ebx
 80486d6:	call   8048520 <__x86.get_pc_thunk.bx>
 80486db:	add    ebx,0x134d
 80486e1:	sub    esp,0x1c
 80486e4:	mov    ebp,DWORD PTR [esp+0x30]
 80486e8:	lea    esi,[ebx-0xf4]
 80486ee:	call   8048404 <_init>
 80486f3:	lea    eax,[ebx-0xfc]
 80486f9:	sub    esi,eax
 80486fb:	sar    esi,0x2
 80486fe:	test   esi,esi
 8048700:	je     8048729 <__libc_csu_init+0x59>
 8048702:	lea    esi,[esi+0x0]
 8048708:	mov    eax,DWORD PTR [esp+0x38]
 804870c:	mov    DWORD PTR [esp],ebp
 804870f:	mov    DWORD PTR [esp+0x8],eax
 8048713:	mov    eax,DWORD PTR [esp+0x34]
 8048717:	mov    DWORD PTR [esp+0x4],eax
 804871b:	call   DWORD PTR [ebx+edi*4-0xfc]
 8048722:	add    edi,0x1
 8048725:	cmp    edi,esi
 8048727:	jne    8048708 <__libc_csu_init+0x38>
 8048729:	add    esp,0x1c
 804872c:	pop    ebx
 804872d:	pop    esi
 804872e:	pop    edi
 804872f:	pop    ebp
 8048730:	ret    
 8048731:	jmp    8048740 <__libc_csu_fini>
 8048733:	nop
 8048734:	nop
 8048735:	nop
 8048736:	nop
 8048737:	nop
 8048738:	nop
 8048739:	nop
 804873a:	nop
 804873b:	nop
 804873c:	nop
 804873d:	nop
 804873e:	nop
 804873f:	nop

08048740 <__libc_csu_fini>:
 8048740:	repz ret 

Disassembly of section tomori:

08048742 <nao>:

void sub_8048742_nao(void){
	setbuf(stdin,0x0);
	setbuf(stdout,0x0);
	system(echo "Hello, I'm nao"!);
}

Disassembly of section .fini:

08048780 <_fini>:
 8048780:	push   ebx
 8048781:	sub    esp,0x8
 8048784:	call   8048520 <__x86.get_pc_thunk.bx>
 8048789:	add    ebx,0x129f
 804878f:	add    esp,0x8
 8048792:	pop    ebx
 8048793:	ret    
